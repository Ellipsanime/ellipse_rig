# coding: utf-8

import maya.cmds as mc

import namesLib

def set_color(obj, colorType=None, color=None):
    '''
    :param obj: string
    :param color: string
    '''
    ## get Shape to color #
    if mc.nodeType(obj) == 'transform':
        shape = mc.listRelatives(obj, s=True)[0]
    elif mc.nodeType(obj) == 'nurbsCurve' or 'locator':
        shape = obj
    mc.setAttr(shape + ".overrideEnabled", True)

    dicColor = {}
    if colorType in 'RGB':
        ## MAYA
        dicColor['red'] = (1, 0, 0)  # maya 13
        dicColor['black'] = (0, 0, 0)  # maya 1
        dicColor['blue'] = (0, 0, 1)  # maya 6
        dicColor['yellow'] = (1, 1, 0)  # maya 17
        dicColor['green'] = (0, 1, 0)  # maya 14
        dicColor["brown24"] = (0.319, 0.133, 0.033) # maya 24
        ## MAYA INTERDIT
        dicColor['white'] = (1, 1, 1)  # maya 16
        dicColor['pink'] = (0.6, 0, 0.6)  # maya 9
        dicColor['blue5'] = (0, 0, .13)  # maya 5
        dicColor['blue18'] = (0, 1, 1)  # maya 18
        dicColor['blue19'] = (0, 1, 0.6)  # maya 19
        ## CUSTOM
        dicColor['purple'] = (0.15, 0, 1)
        dicColor['greenApple'] = (0.5, 1, 0)  # use for setup loc ON
        dicColor['magenta'] = (0.85, 0, 0.25)  # use for setup loc OFF
        dicColor['orange'] = (0.9, 0.2, 0)  # use for c_light
        dicColor['blueA'] = (0, 0.685, .940)

        mc.setAttr(shape + '.overrideRGBColors', 1)
        mc.setAttr(shape + '.overrideColorRGB', dicColor[color][0], dicColor[color][1], dicColor[color][2])

    elif colorType in 'Index':
        ## MAYA
        dicColor["red"] = 13
        dicColor["black"] = 1
        dicColor["blue"] = 6
        dicColor["yellow"] = 17
        dicColor["green"] = 14
        ## MAYA INTERDIT
        dicColor["white"] = 16
        dicColor["pink"] = 9
        dicColor['blue18'] = 18
        dicColor['blue19'] = 19
        ## CUSTOM
        dicColor["purple"] = 30
        dicColor["purple9"] = 9
        dicColor["purple8"] = 8
        dicColor["red4"] = 4
        dicColor["blue15"] = 15
        dicColor["blue28"] = 28
        dicColor["blue29"] = 29
        dicColor["blue5"] = 5
        dicColor["yellow22"] = 22
        dicColor["yellow25"] = 25
        dicColor["green19"] = 19
        dicColor["green23"] = 23
        dicColor["green26"] = 26
        dicColor["green27"] = 27
        dicColor["green7"] = 7
        dicColor["brown"] = 10
        dicColor["brown21"] = 21
        dicColor["brown24"] = 24
        dicColor["brown12"] = 12
        dicColor["brown11"] = 11
        dicColor["grey"] = 2
        dicColor["grey3"] = 3
        dicColor["pink20"] = 20
        dicColor["pink31"] = 31

        mc.setAttr(shape + '.overrideRGBColors', 0)
        mc.setAttr(shape + '.overrideColor', dicColor[color])

    return dicColor
#selObj = mc.ls(sl=True)
#set_color(selObj, colorType='RGB', color='red')

def shp_form(shpType,colorType,color,name=None, *args, **kwargs):
    dicOption = {}
    ###### EMPTY ######
    dicOption["empty"] = {
        "name": "invisible",
        "degres": 1,
        "knots": [0],
        "positions": [(0, 0, 0)]}

    ###### LINE ######
    dicOption["line"] = {
        "name": "line",
        "degres": 1,
        "knots": [0, 1],
        "positions": [(0.0, 0.0, 0.0), (-1.0, 0.0, 0.0)]}

    ###### SQUARE ######
    dicOption["square"] = {
        "name": "square",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4],
        "positions": [(-1, 0, -1), (-1, 0, 1), (1, 0, 1), (1, 0, -1), (-1, 0, -1)]}

    dicOption["squareRounded"] = {
        "name": "squareRounded",
        "degres": 3,
        "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                  26, 27],
        "positions": [(1.0, 0.0, -0.9), (1.0, 0.0, -0.3), (1.0, 0.0, 0.3), (1.0, 0.0, 0.9), (1.0, 0.0, 0.959),
                      (0.959, 0.0, 1.0),
                      (0.9, 0.0, 1.0), (0.3, 0.0, 1.0), (-0.3, 0.0, 1.0), (-0.9, 0.0, 1.0), (-0.959, 0.0, 1.0),
                      (-1.0, 0.0, 0.959), (-1.0, 0.0, 0.9),
                      (-1.0, 0.0, 0.3), (-1.0, 0.0, -0.3), (-1.0, 0.0, -0.9), (-1.0, 0.0, -0.959), (-0.959, 0.0, -1.0),
                      (-0.9, 0.0, -1.0), (-0.3, 0.0, -1.0), (0.3, 0.0, -1.0),
                      (0.9, 0.0, -1.0), (0.959, 0.0, -1.0), (1.0, 0.0, -0.959), (1.0, 0.0, -0.9), (1.0, 0.0, -0.9),
                      (1.0, 0.0, -0.3), (1.0, 0.0, 0.3)]}

    ###### CIRCLE ######
    dicOption["circle"] = {
        "name": "circle",
        "degres": 3,
        "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        "positions": [(0.783, 1.260e-016, -0.783), (1.108, 2.460e-016, 1.264e-016),
                      (0.783, 2.219e-016, 0.783), (3.211e-016, 6.785e-017, 1.108), (-0.783, -1.260e-016, 0.783),
                      (-1.108, -2.460e-016, 3.339e-016),
                      (-0.783, -2.219e-016, -0.783), (-5.952e-016, -6.785e-017, -1.108), (0.783, 1.260e-016, -0.783),
                      (1.108, 2.460e-016, 1.264e-016), (0.783, 2.219e-016, 0.783)]}

    dicOption["circleArrow4"] = {
        "name": "circleArrow4",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                  28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48],
        "positions": [(-0.56, -6.82e-018, 0.11), (-0.71, 0, 0.14), (-0.71, 0, 0.28), (-1.00, 0, 0), (-0.71, 0, -0.28),
                      (-0.71, 0, -0.14), (-0.56, 6.82e-018, -0.11), (-0.52, 1.33e-017, -0.21),
                      (-0.47, 1.94e-017, -0.31), (-0.40, 2.47e-017, -0.40), (-0.31, 2.90e-017, -0.47),
                      (-0.21, 3.23e-017, -0.52), (-0.11, 3.43e-017, -0.56), (-0.14, 0, -0.71), (-0.28, 0, -0.71),
                      (0, 0, -1.00), (0.28, 0, -0.71), (0.14, 0, -0.71), (0.11, 3.43e-017, -0.56),
                      (0.21, 3.23e-017, -0.52), (0.31, 2.90e-017, -0.47), (0.40, 2.47e-017, -0.40),
                      (0.47, 1.94e-017, -0.31),
                      (0.52, 1.33e-017, -0.21), (0.56, 6.82e-018, -0.11), (0.71, 0, -0.14), (0.71, 0, -0.28),
                      (1.00, 0, 0), (0.71, 0, 0.28), (0.71, 0, 0.14), (0.56, -6.82e-018, 0.11),
                      (0.52, -1.33e-017, 0.21),
                      (0.47, -1.94e-017, 0.31), (0.40, -2.47e-017, 0.40), (0.31, -2.908e-017, 0.47),
                      (0.21, -3.23e-017, 0.52), (0.11, -3.43e-017, 0.560), (0.14, 0, 0.71), (0.28, 0, 0.71),
                      (0, 0, 1.00), (-0.28, 0, 0.71),
                      (-0.14, 0, 0.71), (-0.11, -3.43e-017, 0.56), (-0.21, -3.23e-017, 0.52), (-0.31, -2.90e-017, 0.47),
                      (-0.40, -2.47e-017, 0.40), (-0.47, -1.94e-017, 0.31), (-0.52, -1.33e-017, 0.21),
                      (-0.56, -6.82e-018, 0.11)]}

    dicOption["circleArrow"] = {
        "name": "circleArrow",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
        "positions": [(-0.56, -6.82e-18, 0.11), (-0.56, 6.82e-18, -0.11), (-0.47, 1.94e-17, -0.31),
                      (-0.31, 2.9e-17, -0.47), (-0.11, 3.43e-17, -0.56), (0.11, 3.43e-17, -0.56),
                      (0.31, 2.9e-17, -0.47),
                      (0.47, 1.94e-17, -0.31), (0.56, 6.82e-18, -0.11), (0.56, -6.82e-18, 0.11),
                      (0.47, -1.94e-17, 0.31), (0.31, -2.908e-17, 0.47), (0.11, -3.43e-17, 0.56), (0.14, 0.0, 0.71),
                      (0.28, 0.0, 0.71),
                      (0.0, 0.0, 0.9533219904815904), (-0.28, 0.0, 0.71), (-0.14, 0.0, 0.71), (-0.11, -3.43e-17, 0.56),
                      (-0.31, -2.9e-17, 0.47), (-0.47, -1.94e-17, 0.31), (-0.56, -6.82e-18, 0.11)]}

    ###### PIN ######
    dicOption["pinSimple"] = {
        "name": "pinSimple",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
        "positions": [(0.0, 0.0, 0.0), (-0.4981, 0.0, 0.0), (-0.5710, 0.0, 0.1761), (-0.7471, 0.0, 0.2490),
                      (-0.9232, 0.0, 0.1761), (-0.9962, 0.0, 0.0), (-0.9232, 0.0, -0.1761), (-0.7471, 0.0, -0.2490),
                      (-0.5710, 0.0, -0.1761), (-0.4981, 0.0, 0.0), (-0.5710, 0.0, 0.1761), (-0.9232, 0.0, -0.1761),
                      (-0.9962, 0.0, 0.0), (-0.9232, 0.0, 0.1761), (-0.5710, 0.0, -0.1761)]}

    dicOption["pinDouble"] = {
        "name": "pinDouble",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                  28, 29, 30, 31, 32],
        "positions": [(0.0, 0.0, 0.0), (-0.4981, 0.0, 0.0), (-0.5710, 0.0, -0.1761), (-0.7471, 0.0, -0.2490),
                      (-0.9232, 0.0, -0.1761), (-0.9962, 0.0, 0.0), (-0.9232, 0.0, 0.1761), (-0.7471, 0.0, 0.2490),
                      (-0.5710, 0.0, 0.1761), (-0.4981, 0.0, 0.0), (-0.5710, 0.0, 0.1761), (-0.9232, 0.0, -0.1761),
                      (-0.7471, 0.0, -0.2490), (-0.5710, 0.0, -0.1761), (-0.9232, 0.0, 0.1761), (-0.7471, 0.0, 0.2490),
                      (-0.5710, 0.0, 0.1761), (-0.4981, 0.0, 0.0), (0.0, 0.0, 0.0), (0.4981, 0.0, 0.0),
                      (0.5710, 0.0, -0.1761), (0.7471, 0.0, -0.2490), (0.9232, 0.0, -0.1761), (0.9962, 0.0, 0.0),
                      (0.9232, 0.0, 0.1761),
                      (0.7471, 0.0, 0.2490), (0.5710, 0.0, 0.1761), (0.4981, 0.0, 0.0), (0.5710, 0.0, 0.1761),
                      (0.9232, 0.0, -0.1761), (0.7471, 0.0, -0.2490), (0.5710, 0.0, -0.1761), (0.9232, 0.0, 0.1761)]}

    dicOption["pinQuadro"] = {
        "name": "pinQuadro",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                  28,
                  29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                  54, 55,
                  56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
        "positions": [(0.4981, 0.0, 0.0), (0.5710, 0.0, 0.1761), (0.7471, 0.0, 0.2490),
                      (0.9232, 0.0, 0.1761), (1.0, 0.0, 0.0), (0.9232, 0.0, -0.1761), (0.7471, 0.0, -0.2490),
                      (0.5710, 0.0, -0.1761), (0.7471, 0.0, 0.0), (0.9232, 0.0, 0.1761), (0.7471, 0.0, 0.2490),
                      (0.5710, 0.0, 0.1761), (0.7471, 0.0, 0.0), (0.9232, 0.0, -0.1761), (0.7471, 0.0, -0.2490),
                      (0.5710, 0.0, -0.1761), (0.4981, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, -0.4981),
                      (-0.1761, 0.0, -0.5710),
                      (-0.2490, 0.0, -0.7471), (-0.1761, 0.0, -0.9232), (0.0, 0.0, -0.7471), (0.1761, 0.0, -0.5710),
                      (0.2490, 0.0, -0.7471), (0.1761, 0.0, -0.9232), (0.0, 0.0, -0.7471), (-0.1761, 0.0, -0.5710),
                      (-0.2490, 0.0, -0.7471), (-0.1761, 0.0, -0.9232), (0.0, 0.0, -1.0), (0.1761, 0.0, -0.9232),
                      (0.2490, 0.0, -0.7471), (0.1761, 0.0, -0.5710), (0.0, 0.0, -0.4981), (0.0, 0.0, 0.4981),
                      (-0.1761, 0.0, 0.5710), (-0.2490, 0.0, 0.7471), (-0.1761, 0.0, 0.9232), (0.0, 0.0, 1.0),
                      (0.1761, 0.0, 0.9232), (0.2490, 0.0, 0.7471), (0.1761, 0.0, 0.5710), (0.0, 0.0, 0.7471),
                      (-0.1761, 0.0, 0.9232), (-0.2490, 0.0, 0.7471), (-0.1761, 0.0, 0.5710), (0.0, 0.0, 0.7471),
                      (0.1761, 0.0, 0.9232), (0.2490, 0.0, 0.7471), (0.1761, 0.0, 0.5710), (0.0, 0.0, 0.4981),
                      (0.0, 0.0, 0.0), (-0.4981, 0.0, 0.0), (-0.5710, 0.0, 0.1761), (-0.7471, 0.0, 0.2490),
                      (-0.9232, 0.0, 0.1761), (-0.7471, 0.0, 0.0), (-0.5710, 0.0, -0.1761), (-0.7471, 0.0, -0.2490),
                      (-0.9232, 0.0, -0.1761), (-0.7471, 0.0, 0.0),
                      (-0.5710, 0.0, 0.1761), (-0.7471, 0.0, 0.2490), (-0.9232, 0.0, 0.1761), (-1.0, 0.0, 0.0),
                      (-0.9232, 0.0, -0.1761), (-0.7471, 0.0, -0.2490), (-0.5710, 0.0, -0.1761), (-0.4981, 0.0, 0.0)]}

    ###### CROSS ######
    dicOption["crossLine"] = {
        "name": "crossLine",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        "positions": [(0.0, 1.0, 0.0), (0.0, 0.0, 0.0), (0.0, -1.0, 0.0), (0.0, 0.0, 0.0), (1.0, 0.0, 0.0),
                      (-1.0, 0.0, 0.0), (0.0, 0.0, 0.0),
                      (0.0, 0.0, 1.0), (0.0, 0.0, 0.0), (0.0, 0.0, -1.0)]}

    dicOption["cross"] = {
        "name": "cross",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
        "positions": [(-0.33, 0.0, -1.0), (-0.33, 0.0, -0.33), (-1.0, 0.0, -0.33), (-1.0, 0.0, 0.33),
                      (-0.33, 0.0, 0.33),
                      (-0.33, 0.0, 1.0), (0.33, 0.0, 1.0), (0.33, 0.0, 0.33), (1.0, 0.0, 0.33), (1.0, 0.0, -0.33),
                      (0.33, 0.0, -0.33), (0.33, 0.0, -1.0), (-0.33, 0.0, -1.0)]}

    dicOption["crossArrow"] = {
        "name": "crossArrow",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
        "positions": [(0.0, 0.0, 1.0), (0.2043, 0.0, 0.8172), (0.2043, 0.0, 0.2043), (0.8172, 0.0, 0.2043),
                      (1.0, 0.0, 0.0), (0.8172, 0.0, -0.2043), (0.2043, 0.0, -0.2043),
                      (0.2043, 0.0, -0.8172), (0.0, 0.0, -1.0), (-0.2043, 0.0, -0.8172), (-0.2043, 0.0, -0.2043),
                      (-0.8172, 0.0, -0.2043), (-1.0, 0.0, 0.0), (-0.8172, 0.0, 0.2043), (-0.2043, 0.0, 0.2043),
                      (-0.2043, 0.0, 0.8172), (0.0, 0.0, 1.0)]}

    dicOption["rigAdd"] = {
        "name": "rigAdd",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                  28,
                  29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                  54, 55,
                  56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
                  81, 82,
                  83],
        "positions": [(0.0, 0.0, 0.0), (0.6, 0.0, 0.0), (0.8, 0.2, 0.0), (1.0, 0.0, 0.0), (0.8, -0.2, 0.0),
                      (0.6, 0.0, 0.0),
                      (0.8, 0.0, 0.2), (1.0, 0.0, 0.0), (0.8, 0.0, -0.2), (0.8, 0.2, 0.0), (0.8, 0.0, 0.2),
                      (0.8, -0.2, 0.0),
                      (0.8, 0.0, -0.2), (0.6, 0.0, 0.0), (0.0, 0.0, 0.0), (-0.6, 0.0, 0.0), (-0.8, 0.2, 0.0),
                      (-1.0, 0.0, 0.0),
                      (-0.8, -0.2, 0.0), (-0.6, 0.0, 0.0), (-0.8, 0.0, 0.2), (-1.0, 0.0, 0.0), (-0.8, 0.0, -0.2),
                      (-0.8, 0.2, 0.0), (-0.8, 0.0, 0.2), (-0.8, -0.2, 0.0), (-0.8, 0.0, -0.2), (-0.6, 0.0, 0.0),
                      (0.0, 0.0, 0.0), (0.0, 0.6, 0.0), (0.0, 0.8, -0.2), (0.0, 1.0, 0.0), (0.0, 0.8, 0.2),
                      (0.0, 0.6, 0.0),
                      (-0.2, 0.8, 0.0), (0.0, 1.0, 0.0), (0.2, 0.8, 0.0), (0.0, 0.8, 0.2), (-0.2, 0.8, 0.0),
                      (0.0, 0.8, -0.2),
                      (0.2, 0.8, 0.0), (0.0, 0.6, 0.0), (0.0, 0.0, 0.0), (0.0, -0.6, 0.0), (0.0, -0.8, -0.2),
                      (0.0, -1.0, 0.0),
                      (0.0, -0.8, 0.2), (0.0, -0.6, 0.0), (-0.2, -0.8, 0.0), (0.0, -1.0, 0.0), (0.2, -0.8, 0.0),
                      (0.0, -0.8, -0.2), (-0.2, -0.8, 0.0), (0.0, -0.8, 0.2), (0.2, -0.8, 0.0), (0.0, -0.6, 0.0),
                      (0.0, 0.0, 0.0), (0.0, 0.0, -0.6), (0.0, 0.2, -0.8), (0.0, 0.0, -1.0), (0.0, -0.2, -0.8),
                      (0.0, 0.0, -0.6),
                      (-0.2, 0.0, -0.8), (0.0, 0.0, -1.0), (0.2, 0.0, -0.8), (0.0, 0.2, -0.8), (-0.2, 0.0, -0.8),
                      (0.0, -0.2, -0.8), (0.2, 0.0, -0.8), (0.0, 0.0, -0.6), (0.0, 0.0, 0.0), (0.0, 0.0, 0.6),
                      (0.0, 0.2, 0.8),
                      (0.0, 0.0, 1.0), (0.0, -0.2, 0.8), (0.0, 0.0, 0.6), (-0.2, 0.0, 0.8), (0.0, 0.0, 1.0),
                      (0.2, 0.0, 0.8),
                      (0.0, 0.2, 0.8), (-0.2, 0.0, 0.8), (0.0, -0.2, 0.8), (0.2, 0.0, 0.8), (0.0, 0.0, 0.6)]}

    ###### FLY ######
    dicOption["fly"] = {
        "name": "fly",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8],
        "positions": [(0.0066, 0.0, -0.7248), (-0.9853, 0.0, -0.1739), (-0.9853, 0.0, -0.0165),
                      (-0.7019, 0.0, -0.0165), (0.0066, 0.0, -0.41), (0.7151, 0.0, -0.0165), (1.0, 0.0, -0.0165),
                      (1.0, 0.0, -0.1739), (0.0066, 0.0, -0.7248)]}

    ###### SPHERE ######
    dicOption["sphere"] = {
        "name": "sphere",
        "degres": 1,
        "knots": [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                  26,
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
                  52, 53,
                  54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72],
        "positions": [(0.0, 0.0, 1.0), (0.0, 0.259, 0.966), (0.0, 0.5, 0.866), (0.0, 0.707, 0.707), (0.0, 0.866, 0.5),
                      (0.0, 0.966, 0.259), (0.0, 1.0, 0.0), (-0.0, 0.966, -0.259), (-0.0, 0.866, -0.5),
                      (-0.0, 0.707, -0.707),
                      (-0.0, 0.5, -0.866), (-0.0, 0.259, -0.966), (-0.0, 0.0, -1.0), (-0.0, -0.259, -0.966),
                      (-0.0, -0.5, -0.866), (-0.0, -0.707, -0.707), (-0.0, -0.866, -0.5), (-0.0, -0.966, -0.259),
                      (0.0, -1.0, 0.0), (0.0, -0.966, 0.259), (0.0, -0.866, 0.5), (0.0, -0.707, 0.707),
                      (0.0, -0.5, 0.866),
                      (0.0, -0.259, 0.966), (-0.0, -0.0, 1.0), (0.259, 0.0, 0.966), (0.5, 0.0, 0.866),
                      (0.707, 0.0, 0.707),
                      (0.866, 0.0, 0.5), (0.966, 0.0, 0.259), (1.0, 0.0, 0.0), (0.966, -0.0, -0.259),
                      (0.866, -0.0, -0.5),
                      (0.707, -0.0, -0.707), (0.5, -0.0, -0.866), (0.259, -0.0, -0.966), (-0.0, -0.0, -1.0),
                      (-0.259, -0.0, -0.966), (-0.5, -0.0, -0.866), (-0.707, -0.0, -0.707), (-0.866, -0.0, -0.5),
                      (-0.966, -0.0, -0.259), (-1.0, 0.0, 0.0), (-0.966, 0.259, 0.0), (-0.866, 0.5, 0.0),
                      (-0.707, 0.707, 0.0),
                      (-0.5, 0.866, 0.0), (-0.259, 0.966, 0.0), (-0.0, 1.0, 0.0), (0.259, 0.966, -0.0),
                      (0.5, 0.866, -0.0),
                      (0.707, 0.707, -0.0), (0.866, 0.5, -0.0), (0.966, 0.259, -0.0), (1.0, 0.0, -0.0),
                      (0.966, -0.259, -0.0),
                      (0.866, -0.5, -0.0), (0.707, -0.707, -0.0), (0.5, -0.866, -0.0), (0.259, -0.966, -0.0),
                      (-0.0, -1.0, 0.0),
                      (-0.259, -0.966, 0.0), (-0.5, -0.866, 0.0), (-0.707, -0.707, 0.0), (-0.866, -0.5, 0.0),
                      (-0.966, -0.259, 0.0), (-1.0, 0.0, 0.0), (-0.966, -0.0, 0.259), (-0.866, -0.0, 0.5),
                      (-0.707, -0.0, 0.707),
                      (-0.5, -0.0, 0.866), (-0.259, -0.0, 0.966), (0.0, 0.0, 1.0), (0.0, 0.259, 0.966),
                      (0.0, 0.5, 0.866)]}

    ###### TRIANGLE ######
    dicOption["triangle"] = {
        "name": "triangle",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4],
        "positions": [(-1.0, 0.0, -0.0066), (-1.0, 0.0, -0.0066), (-6.217248937900877e-17, 0.0, 0.28),
                      (6.510347816401918e-17, 0.0, -0.2932), (-1.0, 0.0, -0.0066)]}

    ###### PYRAMIDE ######
    dicOption["pyramide"] = {
        "name": "pyramide",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6],
        "positions": [(0.0, 1.0, 0.0), (0.0, 0.0, 1.0), (0.0, 0.0, -1.0), (0.0, 1.0, 0.0), (-1.0, 0.0, 0.0),
                      (1.0, 0.0, 0.0), (0.0, 1.0, 0.0)]}

    ###### CUBE ######
    dicOption["cube"] = {
        "name": "cube",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
        "positions": [(-1, 1, -1), (-1, 1, 1), (1, 1, 1), (1, 1, -1), (-1, 1, -1), (-1, -1, -1), (-1, -1, 1),
                      (1, -1, 1), (1, 1, 1), (-1, 1, 1), (-1, -1, 1), (-1, -1, -1), (1, -1, -1), (1, 1, -1), (1, 1, 1),
                      (1, -1, 1), (1, -1, -1)]}

    ###### ARROW ######
    dicOption["arrowLine"] = {
        "name": "arrowLine",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4],
        "positions": [(0.0, 0.0, 0.0), (0.0, 1.0, 0.0), (0.3, 0.45, -0.0), (0.0, 1.0, 0.0), (-0.3, 0.45, -0.0)]}

    ## single ##
    dicOption["arrowSingle"] = {
        "name": "arrowSingle",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7],
        "positions": [(0.0, 0.0, 0.0), (0.0, 1.0, 0.0), (0.0, 0.45, -0.3), (-0.0, 0.45, 0.3), (0.0, 1.0, 0.0),
                      (-0.3, 0.45, 0.0), (0.3, 0.45, 0.0), (0.0, 1.0, 0.0)]}

    dicOption["arrowSingle2"] = {
        "name": "arrowSingle2",
        "degres": 1,
        "knots": [-1, 0, 1, 2, 3, 4, 5, 6],
        "positions": [(0.125, -0.0, 0.0), (0.125, 0.45, 0.0), (0.3, 0.45, 0.0), (0.0, 1.0, 0.0), (-0.3, 0.45, -0.0),
                      (-0.125, 0.45, -0.0), (-0.125, 0.0, 0.0), (0.125, -0.0, 0.0)]}

    dicOption["arrowSingleCrv"] = {
        "name": "arrowSingleCrv",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
        "positions": [(-0.875, 0.457, -0.0), (-0.833, 0.536, -0.0), (-0.728, 0.684, -0.0), (-0.518, 0.855, -0.0),
                      (-0.269, 0.962, -0.0), (0.0, 0.999, -0.0), (0.269, 0.962, -0.0),
                      (0.518, 0.855, -0.0), (0.728, 0.684, -0.0), (0.833, 0.536, -0.0), (0.875, 0.457, -0.0),
                      (0.921, 0.716, -0.0), (0.875, 0.457, -0.0), (0.606, 0.504, -0.053)]}

    dicOption["arrowSingleCrv2"] = {
        "name": "arrowSingleCrv2",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
        "positions": [(0.955, 0.236, -0.0), (0.921, 0.716, -0.0), (0.875, 0.457, -0.0), (0.833, 0.536, -0.0),
                      (0.728, 0.684, -0.0), (0.518, 0.855, -0.0), (0.269, 0.962, -0.0),
                      (0.0, 0.999, -0.0), (-0.269, 0.962, -0.0), (-0.518, 0.855, -0.0), (-0.728, 0.684, -0.0),
                      (-0.833, 0.536, -0.0), (-0.875, 0.457, -0.0), (-0.791, 0.414, -0.0), (-0.754, 0.485, -0.0),
                      (-0.659, 0.619, -0.0), (-0.468, 0.773, -0.0), (-0.243, 0.871, -0.0), (0.0, 0.904, -0.0),
                      (0.243, 0.871, -0.0), (0.468, 0.773, -0.0), (0.659, 0.619, -0.0), (0.754, 0.485, -0.0),
                      (0.791, 0.414, -0.0), (0.534, 0.469, -0.0), (0.955, 0.236, -0.0)]}

    ## double ##
    dicOption["arrowDouble"] = {
        "name": "arrowDouble",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7],
        "positions": [(-0.45, 0.0, 0.3), (-1.0, 0.0, 0.0), (-0.45, 0.0, -0.3), (-1.0, 0.0, 0.0), (1.0, 0.0, 0.0),
                      (0.45, 0.0, -0.3), (1.0, 0.0, 0.0), (0.45, 0.0, 0.3)]}

    dicOption["arrowDouble2"] = {
        "name": "arrowDouble2",
        "degres": 1,
        "knots": [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        "positions": [(-0.45, 0.0, 0.3), (-0.45, 0.0, 0.125), (0.45, 0.0, 0.125), (0.45, 0.0, 0.3), (1.0, 0.0, 0.0),
                      (0.45, 0.0, -0.3), (0.45, 0.0, -0.125), (-0.45, 0.0, -0.125), (-0.45, 0.0, -0.3),
                      (-1.0, 0.0, 0.0),
                      (-0.45, 0.0, 0.3)]}

    dicOption["arrowDouble3"] = {
        "name": "arrowDouble3",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
        "positions": [(0.0, 1.0, 0.0), (0.0, 0.5, -0.5), (0.0, 0.5, -0.25), (0.0, 0.0, -0.25), (0.0, 0.0, 0.25),
                      (0.0, 0.5, 0.25), (0.0, 0.5, 0.5),
                      (0.0, 1.0, 0.0), (-0.5, 0.52, 0.0), (-0.25, 0.52, 0.0), (-0.25, 0.0, 0.0), (0.25, 0.0, 0.0),
                      (0.25, 0.5, 0.0), (0.5, 0.5, 0.0), (0.0, 1.0, 0.0)]}

    dicOption["arrowDoubleCrv"] = {
        "name": "arrowDoubleCrv",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
        "positions": [(0.606, 0.504, 0.0), (0.875, 0.457, 0.0), (0.921, 0.716, 0.0), (0.875, 0.457, 0.0),
                      (0.833, 0.536, 0.0), (0.728, 0.684, 0.0), (0.518, 0.855, 0.0),
                      (0.269, 0.962, 0.0), (0.0, 0.999, 0.0), (-0.269, 0.962, 0.0), (-0.518, 0.855, 0.0),
                      (-0.728, 0.684, 0.0), (-0.833, 0.536, 0.0), (-0.875, 0.457, 0.0), (-0.921, 0.716, 0.0),
                      (-0.875, 0.457, 0.0), (-0.606, 0.504, 0.0)]}

    dicOption["arrowDoubleCrv2"] = {
        "name": "arrowDoubleCrv2",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                  28],
        "positions": [(0.955, 0.236, 0.0), (0.921, 0.716, 0.0), (0.875, 0.457, 0.0), (0.833, 0.536, 0.0),
                      (0.728, 0.684, 0.0),
                      (0.518, 0.855, 0.0), (0.269, 0.962, 0.0), (0.0, 0.999, 0.0), (-0.269, 0.962, 0.0),
                      (-0.518, 0.855, 0.0), (-0.728, 0.684, 0.0),
                      (-0.833, 0.536, 0.0), (-0.875, 0.457, 0.0), (-0.921, 0.716, 0.0), (-0.955, 0.236, 0.0),
                      (-0.534, 0.469, 0.0), (-0.791, 0.414, 0.0),
                      (-0.754, 0.485, 0.0), (-0.659, 0.619, 0.0), (-0.468, 0.773, 0.0), (-0.243, 0.871, 0.0),
                      (0.0, 0.904, 0.0), (0.243, 0.871, 0.0),
                      (0.468, 0.773, 0.0), (0.659, 0.619, 0.0), (0.754, 0.485, 0.0), (0.791, 0.414, 0.0),
                      (0.534, 0.469, 0.0), (0.955, 0.236, 0.0)]}

    ## quadro ##
    dicOption["arrowQuadro"] = {
        "name": "arrowQuadro",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
        "positions": [(0.3, 0.0, 0.45), (0.0, 0.0, 1.0), (-0.3, 0.0, 0.45), (0.0, 0.0, 1.0), (-0.0, 0.0, -1.0),
                      (0.3, 0.0, -0.45), (-0.0, 0.0, -1.0), (-0.3, 0.0, -0.45), (-0.0, 0.0, -1.0), (0.0, 0.0, 0.0),
                      (-1.0, 0.0, 0.0), (-0.45, 0.0, -0.3), (-1.0, 0.0, 0.0), (-0.45, 0.0, 0.3), (-1.0, 0.0, 0.0),
                      (1.0, 0.0, -0.0), (0.45, 0.0, 0.3), (1.0, 0.0, -0.0), (0.45, 0.0, -0.3), (1.0, 0.0, -0.0)]}

    dicOption["arrowQuadro2"] = {
        "name": "arrowQuadro2",
        "degres": 1,
        "knots": [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],
        "positions": [(-0.45, 0.0, 0.3), (-0.45, 0.0, 0.125), (-0.125, 0.0, 0.125), (-0.125, 0.0, 0.45),
                      (-0.3, 0.0, 0.45),
                      (0.0, 0.0, 1.0), (0.3, 0.0, 0.45), (0.125, 0.0, 0.45), (0.125, 0.0, 0.125), (0.45, 0.0, 0.125),
                      (0.45, 0.0, 0.3), (1.0, 0.0, 0.0), (0.45, 0.0, -0.3), (0.45, 0.0, -0.125), (0.125, 0.0, -0.125),
                      (0.125, 0.0, -0.45), (0.3, 0.0, -0.45), (0.0, 0.0, -1.0), (-0.3, 0.0, -0.45),
                      (-0.125, 0.0, -0.45),
                      (-0.125, 0.0, -0.125), (-0.45, 0.0, -0.125), (-0.45, 0.0, -0.3), (-1.0, 0.0, 0.0),
                      (-0.45, 0.0, 0.3)]}

    dicOption["arrowQuadroBump"] = {
        "name": "arrowQuadroBump",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
                  52, 53,
                  54, 55],
        "positions": [(0.0959835, 0.604001, -0.0987656), (0.500783, 0.500458, -0.0987656),
                      (0.751175, 0.327886, -0.0987656),
                      (0.751175, 0.327886, -0.0987656), (0.751175, 0.327886, -0.336638),
                      (0.751175, 0.327886, -0.336638), (1.001567, 0.0, 0.0),
                      (1.001567, 0.0, 0.0), (0.751175, 0.327886, 0.336638), (0.751175, 0.327886, 0.336638),
                      (0.751175, 0.327886, 0.0987656), (0.751175, 0.327886, 0.0987656),
                      (0.500783, 0.500458, 0.0987656), (0.0959835, 0.604001, 0.0987656),
                      (0.0959835, 0.604001, 0.0987656), (0.0959835, 0.500458, 0.500783),
                      (0.0959835, 0.327886, 0.751175),
                      (0.0959835, 0.327886, 0.751175), (0.336638, 0.327886, 0.751175), (0.336638, 0.327886, 0.751175),
                      (0.0, 0.0, 1.001567), (0.0, 0.0, 1.001567), (-0.336638, 0.327886, 0.751175),
                      (-0.336638, 0.327886, 0.751175), (-0.0959835, 0.327886, 0.751175),
                      (-0.0959835, 0.327886, 0.751175), (-0.0959835, 0.500458, 0.500783),
                      (-0.0959835, 0.604001, 0.0987656),
                      (-0.0959835, 0.604001, 0.0987656), (-0.500783, 0.500458, 0.0987656),
                      (-0.751175, 0.327886, 0.0987656), (-0.751175, 0.327886, 0.0987656),
                      (-0.751175, 0.327886, 0.336638),
                      (-0.751175, 0.327886, 0.336638), (-1.001567, 0.0, 0.0), (-1.001567, 0.0, 0.0),
                      (-0.751175, 0.327886, -0.336638), (-0.751175, 0.327886, -0.336638),
                      (-0.751175, 0.327886, -0.0987656),
                      (-0.751175, 0.327886, -0.0987656), (-0.500783, 0.500458, -0.0987656),
                      (-0.0959835, 0.604001, -0.0987656), (-0.0959835, 0.604001, -0.0987656),
                      (-0.0959835, 0.500458, -0.500783),
                      (-0.0959835, 0.327886, -0.751175), (-0.0959835, 0.327886, -0.751175),
                      (-0.336638, 0.327886, -0.751175), (-0.336638, 0.327886, -0.751175), (0.0, 0.0, -1.001567),
                      (0.0, 0.0, -1.001567),
                      (0.336638, 0.327886, -0.751175), (0.336638, 0.327886, -0.751175),
                      (0.0959835, 0.327886, -0.751175), (0.0959835, 0.327886, -0.751175),
                      (0.0959835, 0.500458, -0.500783), (0.0959835, 0.604001, -0.0987656)]}

    dicOption["arrowOctogone"] = {
        "name": "arrowOctogone",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
                  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48],
        "positions": [(-1.8975, 0.0, 0.0), (-1.4025, 0.0, 0.37125), (-1.4025, 0.0, 0.12375), (-0.380966, 0.0, 0.157801),
                      (-1.079222, 0.0, 0.904213), (-1.254231, 0.0, 0.729204), (-1.341735, 0.0, 1.341735),
                      (-0.729204, 0.0, 1.254231),
                      (-0.904213, 0.0, 1.079222), (-0.157801, 0.0, 0.380966), (-0.12375, 0.0, 1.4025),
                      (-0.37125, 0.0, 1.4025), (0.0, 0.0, 1.8975), (0.37125, 0.0, 1.4025),
                      (0.12375, 0.0, 1.4025), (0.157801, 0.0, 0.380966), (0.904213, 0.0, 1.079222),
                      (0.729204, 0.0, 1.254231), (1.341735, 0.0, 1.341735), (1.254231, 0.0, 0.729204),
                      (1.079222, 0.0, 0.904213), (0.380966, 0.0, 0.157801), (1.4025, 0.0, 0.12375),
                      (1.4025, 0.0, 0.37125), (1.8975, 0.0, 0.0), (1.4025, 0.0, -0.37125), (1.4025, 0.0, -0.12375),
                      (0.380966, 0.0, -0.157801),
                      (1.079222, 0.0, -0.904213), (1.254231, 0.0, -0.729204), (1.341735, 0.0, -1.341735),
                      (0.729204, 0.0, -1.254231), (0.904213, 0.0, -1.079222), (0.157801, 0.0, -0.380966),
                      (0.12375, 0.0, -1.4025),
                      (0.37125, 0.0, -1.4025), (0.0, 0.0, -1.8975), (-0.37125, 0.0, -1.4025), (-0.12375, 0.0, -1.4025),
                      (-0.157801, 0.0, -0.380966), (-0.904213, 0.0, -1.079222), (-0.729204, 0.0, -1.254231),
                      (-1.341735, 0.0, -1.341735),
                      (-1.254231, 0.0, -0.729204), (-1.079222, 0.0, -0.904213), (-0.380966, 0.0, -0.157801),
                      (-1.4025, 0.0, -0.12375), (-1.4025, 0.0, -0.37125), (-1.8975, 0.0, 0.0)]}

    ###### STAR ######
    dicOption["star"] = {
        "name": "star",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
        "positions": [(0.907, 0, -0.523), (0.197, 0, -0.340), (0, 0, -1.047), (0.197, 0, -0.340), (0.907, 0, -0.523),
                      (0.393, 0, 0), (0.907, 0, 0.523),
                      (0.197, 0, 0.340), (0, 0, 1.047), (-0.197, 0, 0.340), (-0.907, 0, 0.523), (-0.393, 0, 0),
                      (-0.907, 0, -0.523), (-0.197, 0, -0.34), (0, 0, -1.047)]}

    ###### ROLL ######
    dicOption["roll"] = {
        "name": "roll",
        "degres": 1,
        "knots": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        "positions": [(0.474561, 0.0, -1.241626), (0.171579, 0.0, -1.214307), (-0.434384, 0.0, -1.159672),
                      (-1.124061, 0.0, -0.419971),
                      (-1.169741, 0.0, 0.305922), (-0.792507, 0.0, 1.018176), (-0.0412486, 0.0, 1.262687),
                      (0.915809, 0.0, 1.006098), (1.258635, 0.0, 0.364883),
                      (1.032378, 0.0, -0.461231), (0.352527, 0.0, -0.810017), (-0.451954, 0.0, -0.43765),
                      (-0.634527, 0.0, 0.208919), (-0.0751226, 0.0, 0.696326),
                      (0.292338, 0.0, 0.414161), (0.476068, 0.0, 0.273078)]}

    ########## custom shape ##############
    if name ==None:
        name = dicOption[shpType]["name"]
    else:
        name = name #+dicOption[shpType]["name"]

    if mc.objExists(name):
        name = namesLib.set_increment(name)
    # create shape
    createShp = mc.curve(n=name,d=dicOption[shpType]["degres"], k=dicOption[shpType]["knots"], p=dicOption[shpType]["positions"])
    # hide default attributs ###
    selShape = mc.listRelatives(createShp, s=True)[0]
    defaultAttributs = mc.listAttr(selShape,visible=True, keyable=True, fromPlugin=True) or []
    # adjustColor
    set_color(createShp,colorType,color)
    # rename shape
    adjustName = name+"Shape"
    renameShp = mc.rename(selShape,adjustName)
    for each in defaultAttributs:
        mc.setAttr(renameShp+".%s"%each, k=False,cb=False)
    return  name

#shp_form("star", name=None)

def shape_size(obj, size=[1, 1, 1], rotShp=[0, 0, 0], *args):
    selShape = mc.listRelatives(obj, s=True)[0]
    recCv = mc.ls(selShape + '.cv[*]', fl=True)
    mc.select(recCv)
    mc.scale(size[0], size[1], size[2], recCv)
    mc.rotate(rotShp[0], rotShp[1], rotShp[2], recCv)
    mc.select(cl=True)


def bounding_box_utils(obj,delete=None):
    dicBound = {}
    # get position of multi Object ###
    bbox = mc.exactWorldBoundingBox(obj, calculateExactly=True)
    valTrans = [(bbox[0] + bbox[3]) / 2, (bbox[1] + bbox[4]) / 2, (bbox[2] + bbox[5]) / 2]
    valRot = mc.xform(obj[0], query=True, worldSpace=True, ro=True)
    # get boundingBox with tmp Cube###
    x1, y1, z1, x2, y2, z2 = mc.exactWorldBoundingBox(obj, calculateExactly=True)
    cubeBoundingBox = mc.polyCube(n="tamp")[0]
    mc.xform(cubeBoundingBox, t=valTrans, ws=True)
    mc.move(x1, '%s.f[5]' % cubeBoundingBox, x=True)
    mc.move(y1, '%s.f[3]' % cubeBoundingBox, y=True)
    mc.move(z1, '%s.f[2]' % cubeBoundingBox, z=True)
    mc.move(x2, '%s.f[4]' % cubeBoundingBox, x=True)
    mc.move(y2, '%s.f[1]' % cubeBoundingBox, y=True)
    mc.move(z2, '%s.f[0]' % cubeBoundingBox, z=True)

    dicBound["sizeX"] = float(mc.getAttr(cubeBoundingBox + ".boundingBoxSizeX")/2)
    dicBound["sizeY"] = float(mc.getAttr(cubeBoundingBox + ".boundingBoxSizeY")/2)
    dicBound["sizeZ"] = float(mc.getAttr(cubeBoundingBox + ".boundingBoxSizeZ")/2)
    dicBound["cubeBoundBox"] = cubeBoundingBox
    # clean cubeBoundingBox
    if delete == True:
        mc.delete(cubeBoundingBox)
    return dicBound

#selObj = mc.ls(sl=True)
#getSizeBound = bounding_box_utils(selObj)
#print getSizeBound["sizeX"]


def parent_shp(lsObj, lsShp, delBaseShp=None, colorType=None, color=None, size=None, rotShp=None):
    # if createCtr is a list, convert to string or value
    if type(lsObj) == type([]):
        pass
    else:
        lsObj = [lsObj]
        #print lsObj

    for eachObj in lsObj:
        ## option delete base shape ##
        try:
            shapeobj = mc.listRelatives(eachObj, s=True)[0]
            if mc.objExists(shapeobj) == True and delBaseShp == True:
                mc.delete(shapeobj)
        except:
            print "no shape"
        ## create Shapes ##
        lShapes = []
        for i, each in enumerate(lsShp):
            createShape = shp_form(each, colorType, color, name=eachObj)
            # adjust size
            shape_size(createShape, size, rotShp)
            lShapes.append(createShape)
        ## parent Shapes ##
        grpTmp = mc.group(n="tamp", em=True)
        for eachShp in lShapes:
            mc.parent(eachShp, grpTmp)
            mc.makeIdentity(eachShp, apply=True)
            mc.refresh(force=True)
            shp = mc.listRelatives(eachShp, s=True)[0]
            mc.parent(shp, grpTmp, r=True, s=True)
            mc.delete(eachShp)
            mc.select(cl=True)
            mc.parent(shp, eachObj, r=True, s=True)
        mc.delete(grpTmp)

#selObj = mc.ls(sl=True)
#parent_shp(selObj, ["pyramide", "cube", "triangle"], delBaseShp=None, colorType='RGB', color='green', size=[1, 1, 1],
#         rotShp=[0, 0, 0])



def match_cvs(shpRef=None, shpTarget=None):
    if not shpRef:
        sel = mc.ls(sl=True)
        shpRef = sel[0]
        shpTarget = sel[1]
    indicesRef = mc.getAttr(shpRef + ".controlPoints", multiIndices=True)
    for index in indicesRef:
        obj = shpRef + ".cv[" + str(index) + "]"
        position = mc.pointPosition(obj, world=True)
        objTarget = shpTarget + ".cv[" + str(index) + "]"
        mc.xform(objTarget, translation=position, worldSpace=True)

def snap_cvs(shapeRef, shapeTarget):
    '''
    :param shapeRef: string
    :param shapeTarget: string
    '''
    mc.delete(shapeRef, constructionHistory=True)
    lIndicesRef = mc.getAttr(shapeRef + ".controlPoints", multiIndices=True)
    for index in lIndicesRef:
        cv = shapeRef + ".cv[" + str(index) + "]"
        position = mc.pointPosition(cv, world=True)
        cvTarget = shapeTarget + ".cv[" + str(index) + "]"
        mc.xform(cvTarget, translation=position, worldSpace=True)

def parent_shapes(ref, tTarget, replace=True, delRef=False, inplace=True, instance=False):
    '''
    :param ref: string : transform ou shape de reference
    :param tTarget: string : transform target
    :param replace: bool : if False == add shape
    :param delRef: bool
    :param inplace: bool : if False == center
    :return: string
    '''
    if mc.nodeType(ref) == 'transform' or 'joint':
        tRef = ref
        lRefShp = mc.listRelatives(tRef, shapes=True) or []
    #elif mc.nodeType(ref) == 'nurbsCurve':
    #elif mc.nodeType(ref) == 'nurbsCurve':
    #elif mc.nodeType(ref) == 'nurbsCurve':
    #elif mc.nodeType(ref) == 'nurbsCurve':
    elif mc.nodeType(ref) == 'nurbsCurve':
        lRefShp = [ref]
        tRef = mc.listRelatives(ref, parent=True)[0]
    else:
        print 'nodeType' + mc.nodeType(ref)

    if replace:
        lTargetShp = mc.listRelatives(tTarget, shapes=True) or []
        for tTargetShp in lTargetShp:
            mc.delete(tTargetShp)

    if instance:
        delRef = False
        print "lRefShp :", lRefShp
        for i in range(len(lRefShp)):

            lNewShp = mc.parent(lRefShp[i], tTarget, shape=True, add=True)
            if inplace:
                snap_cvs(lRefShp[i], lNewShp[0])
    else:
        lTDup = namesLib.duplicate_rename(tRef, prefix='TMP')

        lShpDup = mc.listRelatives(lTDup[0], shapes=True) or []

        for i in range(len(lShpDup)):
            lNewShp = mc.parent(lShpDup[i], tTarget, shape=True, relative=True)
            if inplace:
                snap_cvs(lRefShp[i], lNewShp[0])
        mc.delete(lTDup)

        if delRef:
            mc.delete(tRef)
    ## RENAME SHAPES    ## CHECK IF EXISTING SHAPES ARE NOT INSTANCE
    if not instance:
        rename_shapes([tTarget])
        #lTargetShp = mc.listRelatives(tTarget, shapes=True)
        #if len(lTargetShp) > 1:
        #    for i in range(len(lTargetShp)):
        #        mc.rename(lTargetShp[i], tTarget + 'Shape' + str(i + 1))
        #else:
        #    mc.rename(lTargetShp[0], tTarget + 'Shape')
    return tTarget

def rename_shapes(lTransform):
    for obj in lTransform:
        lShp = mc.listRelatives(obj, shapes=True) or []
        if len(lShp) > 1:
            for i in range(len(lShp)):
                if not mc.listAttr(lShp[i], userDefined=True):
                    mc.rename(lShp[i], obj + 'Shape' + str(i + 1))
        else:
            if not mc.listAttr(lShp[0], userDefined=True):
                mc.rename(lShp[0], obj + 'Shape')

def shape_to_transforms(tShp, lTrsf, replace=True, delState=True, location=False, instance=False):
    if len(lTrsf) == 1:
        parent_shapes(tShp, lTrsf[0], replace=replace, delRef=delState, inplace=location, instance=instance)
    if len(lTrsf) > 1:
        for trsf in lTrsf:
            parent_shapes(tShp, trsf, replace=replace, delRef=False, inplace=location, instance=instance)
        if delState:
            mc.delete(tShp)
    mc.select(lTrsf)

def filter_attr(attrTarget='attrName', searchList=None, longName=False):
    """
    author : Juline BRETON
    :param attrTarget: string : attribute name
    :param searchList: list
    :param typ: string : node type
    :return: list of all nodes with the attribute target
    """
    if not searchList:
        searchList = mc.ls(sl=False, type='transform', long=longName)
    lAttrWanted = []
    for node in searchList:
        lAllAttr = mc.listAttr(node)
        if attrTarget in lAllAttr:
            lAttrWanted.append(node)
    return lAttrWanted

def get_all_ctrl():
    lCtrl = filter_attr(attrTarget='nodeType')
    return lCtrl